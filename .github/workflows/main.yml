name: CI/CD Pipeline with API Scan

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Run tests
        id: tests
        run: |
          pytest tests/ || echo "Tests failed" > result.log

      - name: Set test result
        id: set_result
        run: |
          if [ -f result.log ]; then
            echo "status=FAIL " >> $GITHUB_OUTPUT
          else
            echo "status=PASS " >> $GITHUB_OUTPUT
          fi

      - name: Call backend API with parameters
        id: api_call
        run: |
          # Set parameters
          PARAM1=110
          PARAM2=60
          PARAM3=12

          # Call your API
          response=$(curl -s "http://13.201.97.141:4999/dummy/$PARAM1/$PARAM2/$PARAM3")
          
          echo "API response: $response"
          echo "api_result=$response" >> $GITHUB_OUTPUT

      - name: Fail if API response contains fail
        if: always()
        run: |
          response="${{ steps.api_call.outputs.api_result }}"
          echo "Checking API response: $response"
          if echo "$response" | grep -iq "fail"; then
            echo "❌ API returned fail. Failing the workflow."
            exit 1
          else
            echo "✅ API response OK."
          fi
      - name: Deploy Python backend to EC2
        if: success()  # Only deploy if tests and API check passed
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Deploying backend on EC2..."
            # Navigate to your app directory
            cd /home/ec2-user/my-backend
            # Pull latest code from GitHub
            git reset --hard
            git pull origin main
            # Optional: Create virtualenv if not exists
            if [ ! -d venv ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            # Restart your Python backend (example with systemd)
            python app.py
            echo "Deployment completed!"
